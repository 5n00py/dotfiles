# ------------------------------------------------------------------------------
# Set Prefix 
# ------------------------------------------------------------------------------

# Set prefix to Control + Space
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# ------------------------------------------------------------------------------
# Tmux Plugin Manager
# ------------------------------------------------------------------------------

# TPM handles the installation, updating and initialization of plugins.
# To install TPM, follow instructions at https://github.com/tmux-plugins/tpm

# In order to install the plugins press prefix + I. This is the TPM command to
# install new plugins.

# After doing this, the plugins should be downloaded and installed into the 
# ~/.tmux/plugins/ directory. You can check if the operation was successful by 
# running 'ls ~/.tmux/plugins/'. 

set -g @plugin 'tmux-plugins/tpm'

# ------------------------------------------------------------------------------
# Options
# ------------------------------------------------------------------------------

# A set of tmux options that should be acceptable to everyone. These are pretty 
# standard and are often used as a starting point for personal configurations.
# See https://github.com/tmux-plugins/tmux-sensible
# Note: The settings in .tmux.conf will override those set by tmux-sensible.
set -g @plugin 'tmux-plugins/tmux-sensible'

# Disable automatic renamig of windows and panes
set-option -g allow-rename off

# Prevent detachment from session when closing panes/windows
set-option -g detach-on-destroy off

# Keep panes open when their process exits to allow reviewing program output. 
# Note: This does not persist panes across reboots or tmux server restarts. 
# For that, consider using a plugin like tmux-resurrect or tmux-continuum.
set-option -g remain-on-exit on

# Enable mouse support
set-option -g mouse on

# Set default terminal: Define the terminal type for applications running 
# inside tmux.
set -g default-terminal "tmux-256color"

# Override the color settings of the 'xterm-256color' terminfo entry and enable 
# RGB color support when running inside tmux: This tells tmux to assume that the 
# terminal supports 24-bit ("true") color, even though the 'xterm-256color' 
# terminfo entry does not specify this capability. This is necessary when using 
# Neovim with true color inside tmux, because Neovim relies on the Tc or RGB 
# terminfo capability to detect true color support, and 'xterm-256color' does 
# not include this capability. The ':checkhealth' command in Neovim can help 
# diagnose true color issues.
set-option -sa terminal-overrides ',xterm-256color:RGB'

# Note: There is still one error in nvim checkhealth to be fixed:
# ERROR: $TERM differs from the tmux `default-terminal` setting. Colors might look wrong.
#     - ADVICE:
#       - $TERM may have been set by some rc (.bashrc, .zshrc, ...).
#

# Set escape-time: Set the maximum time in milliseconds that tmux waits after 
# receiving the escape character to see if it is part of a function or meta key 
# sequence. 
set-option -sg escape-time 10

# set focus-events: When this option is on, tmux will send focus in and focus 
# out escape sequences (\e[I and \e[O) when a pane gains or loses focus. These 
# sequences can be used by applications to react to focus changes. This can be 
# useful in combination with Vim's 'autoread' option, for example.
set-option -g focus-events on

# Start numbering windows and panes from 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# Set the maximum number of lines held in the history
set -g history-limit 10000


# ------------------------------------------------------------------------------
# Key Bindings 
# ------------------------------------------------------------------------------

# Reload configuration file
bind r source-file ~/.tmux.conf \; display-message "Reloading tmux config..."

# Keybindings for splitting windows

# All key variants on the '/' key are mapped for increased accessibility and 
# compatibility across different keyboards and layouts.
# The '/', '|' and '7' keys split the window horizontally, while the '-' key 
# splits the window vertically. This accommodates various keyboard types and 
# user preferences. The current path will be maintained.
bind / split-window -h -c '#{pane_current_path}' 
bind | split-window -h -c '#{pane_current_path}' 
bind - split-window -v -c '#{pane_current_path}'

# Quickly open a new window in the same path
bind n new-window -c '#{pane_current_path}'

# Quickly kill a window 
bind N kill-window

# vim-tmux-navigator configuration
#
# This plugin provides seamless navigation between Vim panes and tmux splits
# with the following mappings:
# <ctrl-h> to navigate Left
# <ctrl-j> to navigate Down
# <ctrl-k> to navigate Up
# <ctrl-l> to navigate Right
# <ctrl-\> to navigate to the Previous split
# Note: No need to prefix these bindings with the tmux key sequence
set -g @plugin 'christoomey/vim-tmux-navigator'

# Pane movement in vim style
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Big pane size changes, non-repeatable
bind J resize-pane -D 5
bind K resize-pane -U 5
bind H resize-pane -L 5
bind L resize-pane -R 5

# Resize panes using arrow keys, repeatable
bind -r Left resize-pane -L 5
bind -r Right resize-pane -R 5
bind -r Up resize-pane -U 5
bind -r Down resize-pane -D 5

# Toggle the status bar on and off with prefix + 's' (showing or hiding status
# bar)
bind s set status

# Mimic Vim's ':q' command to detach from the current tmux session. 
# By pressing 'prefix + q', the current tmux session is detached, returning to 
# the normal terminal.
bind-key q detach


# List active sessions in an interactive menu to choose
bind-key Tab choose-session

# Copy mode using 'v'
unbind [
bind v copy-mode
# Note: A popular choice here is 'Esc' but because of conflicts I changed,
# choosing 'v' which resembles starting visual selection in vim...

# Use vi keybindings in copy mode
setw -g mode-keys vi

# Paste using 'p' similar to vim...
unbind p
bind p paste-buffer

# Start selection with 'space' and copy using 'y' (and escape with 'q')

# Remember: By default, tmux operates with its own clipboard which is separate
# from the system clipboard. Uncomment this if you want to only copy to tmux's
# buffer:
# bind-key -T copy-mode-vi y send-keys -X copy-selection

# Here I use 'xlip' to access system clipboard. An alternative would be 'xsel'.
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"

# Exit copy mode with escape key in vi mode
bind-key -T copy-mode-vi Escape send-keys -X cancel

# ------------------------------------------------------------------------------
# Appearance
# ------------------------------------------------------------------------------

# Tokyonight Theme 
set -g @plugin "janoamaral/tokyo-night-tmux"

# ------------------------------------------------------------------------------
# Plugins 
# ------------------------------------------------------------------------------

# tmux-continuum is a plugin for continuous saving of tmux environment. It 
# automatically restores previously saved environment when starting tmux.
# With tmux-continuum, you can achieve a persistent tmux session.
set -g @plugin 'tmux-plugins/tmux-continuum'

# tmux-resurrect provides a way to save and restore tmux sessions across system
# reboots. This includes all windows, panes, their order, current working 
# directories, and even pane content.
# To use tmux-resurrect, press prefix + Ctrl-s to save and prefix + Ctrl-r to 
# restore.
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Restoring vim and neovim sessions
# Recommended by maintainer:
# [tpope/vim-obsession](https://github.com/ tpope/vim-obsession) (as almost every
# plugin, it works for both vim and neovim).
# for vim
set -g @resurrect-strategy-vim 'session'
# for neovim
set -g @resurrect-strategy-nvim 'session'

# tmux-resurrect will now restore vim and neovim sessions if `Session.vim` 
# file is present.

# This plugin enables:
# - regex searches (native support added in tmux 3.1)
# - search result highlighting
# - predefined searches
set -g @plugin 'tmux-plugins/tmux-copycat'


# Source and initialize TPM (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'


#                     ♫♪♪♫♪♪.ılılıll|̲̅̅●̲̅̅|̲̅̅=̲̅̅|̲̅̅●̲̅̅|llılılı.♫♪♪♫♪♪
# =============================================================================
